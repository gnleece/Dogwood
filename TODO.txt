---------------------------------------------------------------------------
|               DOGWOOD ENGINE: FEATURE ROADMAP / TODO LIST               |
---------------------------------------------------------------------------

ENGINE
    * Game object/component system
        * Proper awake/start/enable/disable/destroy/etc.
            * ActiveSelf / ActiveInHierarchy
    * Resources
        * Unloading
        * Material type?
        * Save processed (indexed) meshes
    
    * Text (2D)
    * Particles
    * Shadows
    * Physics
    * Animation
    * Audio
    * Networking
    * Memory allocators
    * Prefabs

    * Rendering
        * DirectX support
        * Multiple cameras
        * Multiple lights

    * Transform math helpers
        * Transform worldspace setters - need to test and replace

    * Debugging
        * Debug logging (with streams)
            * Convert printfs to use logging system
        * Tweakables?

    * Fix-up stuff
        * Memory leaks everywhere! Lots of missing "deletes"
        * Rewrite matrix inversion. Currently just copied from CS488 provided code
        * Input wrappers
            * Configurable gamepad setup
            * #define to compile without XInput?
        * Re-factor MainEditorWindow.cpp
        * typedef guid type?
        * Use tinyxml "query" functions for better error handling
        * Add textbook page references

---------------------------------------------------------------------------

EDITOR

    * Port to C#/XAML ?

    * Project
        * Project settings window
        * Prompt for save on exit/unload
        * Remove assets (un-import)
        * Save/load scene list
        * Automatically rebuild shader info on shader import

    * Scene
        * Prompt for save on exit/unload
        * Camera settings
        * Light settings

    * Game components
        * Built-in component widgets
            * Transform: expand x/y/z as separate rows
            * Mesh/Texture/Shader: add browse
        * Remove components
            * Undo/redo on add/remove
            * Refresh widget on add/remove
        * Enable/disable components
        * General
            - Show bool values as check boxes
            - Set data using EditorCommands for undo/redo everywhere
            - Better value validation
            - Fixup background color code
            - For reference types, show full asset path on hover (Scripts)
            - Reference type params should be styled differently (font color?)
            - Fix occasioanl null refs after model delete & rebuild
        * Write python script info to log file
        * Live preview of engine components (e.g. particle systems)

    * Physics
        * Expose physics settings in Editor
        * Refresh capsule draw on object scale
        * "Collider editing"

    * Visuals
        * Change transform tool shape based on mode
        * Use cones instead of pyramids for gnomon arrows

    * Object manipulation
        * Better rotation widget (and fix global vs local)
    
    * Window resizing

    * "Prefabs"?

    BUGS:
        Lo pri
        - Items don't auto expand when reparented
        - Scene view resolution isn't set nicely
        - Rotation tool behaviour is non-intuitive
        - Saving project should write asset list in consistent order
            - Done for all except default resources
        - Fix GameObject child removal
        - Refresh widgets on schema rebuild
        - Move camera in editor to show gnomon if it's out of view on object select
            - Fixed for scene select but not hierarchy select
            - Force on double click
        - Function parity for algebra classes

        Hi pri
        - Gnomon and scene view grid are broken (Debug draw refactor)
        - "New Scene" is broken
        - Fix translation tool interactions
            - Local vs. global
            - Proper hit detection on actual arrows
        - Undo/redo broken with delete/undo create. Need to avoid use of QModelIndex
        - Move processing scripts out of Editor and into Engine
        - Engine component setup for new projects
        - Don't hardcode engine component guids
        - Fix light power loading - remove GLint from Light
        - Camera controls got inverted

        Physics
        - Box-box collisions don't stabilize. e.g. cube falling on ground (box) lands, resolves,
        and jitters forever. Physics tries to sleep the cube, but the gravity force generator wakes
        it up again every frame. Tried to look at source code from textbook for solution, but example
        I'd been using for reference doesn't actually use force generators for gravity. Need to investigate

---------------------------------------------------------------------------

GAME (Katamari?)


---------------------------------------------------------------------------

SCENE/EDITOR REQUIREMENTS

    - Create game objects
    - Name game objects
    - Reparent game objects
    - Position, rotate, and scale game objects
    - Enable/disable game objects
    - Delete game objects
    - Add built-in components to game objects
	    - Mesh, Material, Texture
    - Set the values of built in components to game objects
	    - Mesh, Material, Texture
    - Add user defined (C++) components to game objects
    - Set the values of user defined (C++) components of game objects
    - Instance/duplicate game objects

    - Position the camera(s)
    - Position the light source(s), set parameters


RUN-TIME GAME OBJECT REQUIREMENTS

    - Create/spawn game objects
    - Trigger Awake/Start/etc. functions
    - Name game objects
    - Reparent game objects
    - Position, rotate, and scale game objects
    - Enable/disable game objects
    - Destroy game objects
    - Add/remove components

---------------------------------------------------------------------------

DESIGN DECISIONS

    Matrices are row major

    Right handed coordinate system
        - Most OpenGL tutorial are right handed

    Scene files
     - Format: XML
        - Mergeable/diffable
        - Human readable
        - Human writeable (before tool is ready)
    - Wrap in Serializer class
        - Allows easy replacement of XML library

    Editor
    - Start early! Build in lockstep with Engine features
    - Put Engine code in separate project that builds static lib
        - Linked to Game exe and Editor exe

    Windowing/UI Library
    - QT for Editor but GLFW for game
        - QT needed for UI for Editor, but can't control game loop as easily, slower
        - Can build game without Qt dependency

    Undo/redo 
    - Added undo stack right after first editor commands were implemented (create and delete)
    - Would be extremely painful to add in later after lots of commands were implemented

    Error checking in Editor
    - Make some assumptions about user choices for simplicity

    Reworking shader asset
    - Initially shaders were a weird special case of asset with two source files (vert shader and frag shader)
    - This cause a lot of ugly special case code all over the place
    - Eventually changed it so that a shader is just one file, with annotation separating vert part from frag part
    - Wish I had done the change sooner, had to change project and scene files by hand to fix it

    Do cleanup / deletion code right away
    - Leaving it as a TODO means it probably won't get done

    Refactors
    - Shaders (2 files per shader -> single file format)
    - Serialization (raw XML -> HierarchicalSerializer)
    - TODO wrap all OpenGL (to allow DirectX support as alternate option)
        - Interface/implementation separation (abstract classes in headers, plat-specific implementations in .cpp)
    - TODO quaternions
    - TODO C#/XAML for Editor?
    - TODO clean up engine interface for game code / separate internal vs. external components

Bugs/Problems solved
    Physics
        - Rotation problems on box collisions
            - Bug on contact point calculation - took a while to find because I thought collision detection code
            was correct, but that value was never used in any of my testing
            - Quaternion <-> Euler angle bug - component mapping bug (Rendering engine uses rotation matrices,
            physics textbook uses quaternion ijkr Wikipedia uses xyzw)
        - Box on box - constant jitter on resting contacts

References

http://seanmiddleditch.com/matrices-handedness-pre-and-post-multiplication-row-vs-column-major-and-notations/
http://www.3dgep.com/understanding-the-view-matrix/
https://en.wikibooks.org/wiki/GLSL_Programming/Unity/Toon_Shading

Physics notes
- Game objects can have multiple colliders (including multiple of the same type)
- Game objects can NOT have multiple rigid bodies
- Game objects can have collider(s) but no rigid body
    - Used for "triggers" - object gets collision events, but is not moved by physics
- Game objects can have a rigid body but no colliders
    - Used for objects that move without colliding - e.g. falling from gravity

    https://www.gamedev.net/resources/_/technical/math-and-physics/capsule-inertia-tensor-r3856